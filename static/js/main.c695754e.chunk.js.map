{"version":3,"sources":["components/index.tsx","App.tsx","index.tsx"],"names":["base58check","require","NEW_PREFIX","Index","useState","newIdInputInfo","setNewIdInputInfo","hash","setHash","newAddressInput","setNewAddressInput","convertedHexAddress","setConvertedHexAddress","convertedCheckSumAddress","setConvertedCheckSumAddress","hexAddressInput","setHexAddressInput","convertedMainNewAddress","setConvertedMainNewAddress","convertedTestNewAddress","setConvertedTestNewAddress","convertedDevNewAddress","setConvertedDevNewAddress","parseAddressInfo","chainId","address","data","toString","slice","length","style","width","placeholder","onChange","e","target","value","readOnly","onClick","startsWith","decodeData","decode","hex","utils","getAddress","isAddress","mainData","testData","devData","encode","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c695754e.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\nimport {utils} from 'ethers'\n\nconst base58check =  require('base58check');\nconst NEWID_PREFIX = \"NEWID\"\nconst NEW_PREFIX = \"NEW\"\nconst CHAIN_ID_DEV = 1002\nconst CHAIN_ID_TEST = 1007\nconst CHAIN_ID_MAIN = 1012\n\nfunction Index() {\n\n    const [newIdInputInfo, setNewIdInputInfo] = useState(\"\")\n    const [hash, setHash] = useState(\"\")\n\n\n    function handleNewIdInputChange(e: ChangeEvent<HTMLInputElement>) {\n        setNewIdInputInfo(e.target.value)\n    }\n\n    function handleConfirmConvert() {\n        if(newIdInputInfo == null) {\n            return\n        }\n        if(!newIdInputInfo.startsWith(NEWID_PREFIX)) {\n            return;\n        }\n        const data = newIdInputInfo.slice(5)\n        const decodeData = base58check.decode(data)\n        setHash('0x' + decodeData.data.toString('hex').slice(4))\n    }\n\n\n    const [newAddressInput, setNewAddressInput] = useState(\"\")\n    const [convertedHexAddress, setConvertedHexAddress] = useState(\"\")\n    const [convertedCheckSumAddress, setConvertedCheckSumAddress] = useState(\"\")\n\n    function handleNewAddressChange(e: ChangeEvent<HTMLInputElement>) {\n        setNewAddressInput(e.target.value)\n    }\n\n    function handleNewAddressToHex() {\n        if(newAddressInput == null) {\n            return\n        }\n        if(!newAddressInput.startsWith(NEW_PREFIX)) {\n            return;\n        }\n        const hex = \"0x\" + base58check.decode(newAddressInput.slice(3), \"hex\").data.slice(4);\n        setConvertedHexAddress(hex)\n        setConvertedCheckSumAddress(utils.getAddress(hex))\n    }\n\n    const [hexAddressInput, setHexAddressInput] = useState(\"\")\n    const [convertedMainNewAddress, setConvertedMainNewAddress] = useState(\"\")\n    const [convertedTestNewAddress, setConvertedTestNewAddress] = useState(\"\")\n    const [convertedDevNewAddress, setConvertedDevNewAddress] = useState(\"\")\n\n    function handleHexAddressChange(e: ChangeEvent<HTMLInputElement>) {\n        setHexAddressInput(e.target.value)\n    }\n\n    function handleHexAddressToNewAddress() {\n        if(hexAddressInput == null) {\n            return\n        }\n        if(hexAddressInput.startsWith(NEW_PREFIX)) {\n            return;\n        }\n        if(!utils.isAddress(hexAddressInput)) {\n            return;\n        }\n        let address: string\n        if(hexAddressInput.startsWith('0x')) {\n            address = hexAddressInput.slice(2)\n        } else {\n            address = hexAddressInput\n        }\n        let mainData = parseAddressInfo(CHAIN_ID_MAIN, address)\n        const testData = parseAddressInfo(CHAIN_ID_TEST, address)\n        const devData = parseAddressInfo(CHAIN_ID_DEV, address)\n        setConvertedMainNewAddress(NEW_PREFIX + base58check.encode(mainData))\n        setConvertedTestNewAddress(NEW_PREFIX + base58check.encode(testData))\n        setConvertedDevNewAddress(NEW_PREFIX + base58check.encode(devData))\n    }\n\n    function parseAddressInfo(chainId: number, address: string) {\n        let data = chainId.toString(16).slice(-8) + address\n        if (data.length % 2 !== 0) {\n            data = '0' + data\n        }\n        return data\n    }\n\n    return (\n        <div>\n            <h1>NewId Convert</h1>\n            <div>\n                NEWid: <input style={{width: \"80%\"}} placeholder=\"Input NewID\" onChange={handleNewIdInputChange}/>\n            </div>\n            <div>\n                NEWHash: <input style={{width: \"80%\"}} placeholder=\"Hash\" value={hash} readOnly={true}/>\n            </div>\n            <button onClick={handleConfirmConvert}>确认</button>\n\n            { /*Convert NewAddress to Hex Address */ }\n            <h1>Convert NewAddress to Hex Address</h1>\n            <div>\n                NewAddress: <input style={{width: \"80%\"}} placeholder=\"Input New Address\" onChange={handleNewAddressChange}/>\n            </div>\n            <div>\n                HexAddress: <input style={{width: \"80%\"}} placeholder=\"HexAddress\" value={convertedHexAddress} readOnly={true}/>\n            </div>\n            <div>\n                CheckSum HexAddress: <input style={{width: \"80%\"}} placeholder=\"CheckSum HexAddress\" value={convertedCheckSumAddress} readOnly={true}/>\n            </div>\n            <button onClick={handleNewAddressToHex}>确认</button>\n\n            { /*Convert Hex Address to NewAddress */ }\n            <h1>Convert Hex Address to NewAddress</h1>\n            <div>\n                HexAddress: <input style={{width: \"80%\"}} placeholder=\"Input New Address\" onChange={handleHexAddressChange}/>\n            </div>\n            <div>\n                MainNet NewAddress: <input style={{width: \"80%\"}} placeholder=\"Main NewAddress\" value={convertedMainNewAddress} readOnly={true}/>\n            </div>\n            <div>\n                TestNet NewAddress: <input style={{width: \"80%\"}} placeholder=\"Test NewAddress\" value={convertedTestNewAddress} readOnly={true}/>\n            </div>\n            <div>\n                DevNet NewAddress: <input style={{width: \"80%\"}} placeholder=\"Dev NewAddress\" value={convertedDevNewAddress} readOnly={true}/>\n            </div>\n            <button onClick={handleHexAddressToNewAddress}>确认</button>\n\n        </div>\n    );\n}\n\nexport default Index;\n","import './App.css';\nimport Index from \"./components/index\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Index />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}